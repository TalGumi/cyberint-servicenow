<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <business_calendar/>
        <condition/>
        <conditional>false</conditional>
        <entered_time/>
        <max_drift/>
        <name>Cyberint_Pulling_Script</name>
        <offset/>
        <offset_type>0</offset_type>
        <run_as/>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 00:10:00</run_period>
        <run_start>2022-08-18 11:43:00</run_start>
        <run_time>1970-01-01 08:01:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[(function executeRule(current, previous) {

    function attachments(alert_id, alert_sys_id, attachment_id, file_name) {
        let r = new sn_ws.RESTMessageV2('x_cyit_cyberint.Cyberint_API', 'GET - Alert attachments');

        r.setStringParameter('alert_id', alert_id);
        r.setStringParameter('attachment_id', attachment_id);

        r = setRequestCustomHeaders(r);
        r = setRequestStringParameters(r);

        const alert_file_name = `${alert_id}_attachment_${file_name}`;
        r.saveResponseBodyAsAttachment('x_cyit_cyberint_cyberint_alerts', alert_sys_id, alert_file_name);

        const response = r.executeAsync();
        const httpResponseStatus = response.getStatusCode();
        logger('DEBUG', `Add Attachment for alert ${alert_id} : Status Code ${httpResponseStatus}`);
        logger('INFO', `Request Headers ${r.getRequestHeaders()}`);
    }

    function analysisReport(alert_id, alert_sys_id, file_name) {
        let r = new sn_ws.RESTMessageV2('x_cyit_cyberint.Cyberint_API', 'GET - Analysis report');

        r.setStringParameter('alert_id', alert_id);

        r = setRequestCustomHeaders(r);
        r = setRequestStringParameters(r);

        const alert_file_name = `${alert_id}_analysisReport_${file_name}`;
        r.saveResponseBodyAsAttachment('x_cyit_cyberint_cyberint_alerts', alert_sys_id, alert_file_name);

        const response = r.executeAsync();
        const httpResponseStatus = response.getStatusCode();
        logger('DEBUG', `Add Analysis Report for alert ${alert_id} : Status Code ${httpResponseStatus}`);
        logger('INFO', `Request Headers ${r.getRequestHeaders()}`);
    }

    function fetchAlerts(page) {
        let r = new sn_ws.RESTMessageV2('x_cyit_cyberint.Cyberint_API', 'POST - Fetch alerts from CyberInt');

        // set cookie header with token from credentials table
        let instance = new GlideRecord('x_cyit_cyberint_configuration');
        instance.addQuery('api_token', '!=', 0);
        instance.query();
        instance.next();

        r = setRequestCustomHeaders(r);
        r = setRequestStringParameters(r);

        // set body filters with fields from credentials table
        const severities = instance.severity.toString().split(",");
        const types = instance.type.toString().split(",");

        // use unix timestamp
        let rightnow = new GlideDateTime();

        let last_fetch_time = instance.last_fetch_time;
        logger('DEBUG', `last_fetch_time value: ${last_fetch_time}`);

        const filters = {
          ...(instance.severity) && { "severity": severities },
          ...(instance.type) && { "type": types },
          ...({}) && {
            "update_date": {
                "from": String(last_fetch_time),
                "to": String(rightnow)
            }
          }
        };

        const size = 100;

        const body = {
            page,
            size,
            filters
        };

        r.setRequestBody(JSON.stringify(body));

        logger('INFO', `Fetch Request Body: ${r.getRequestBody()}`);
        logger('INFO', `Fetch Request Headers: ${JSON.stringify(r.getRequestHeaders())}`);
        const response = r.executeAsync();
        const responseBody = response.getBody();
        const httpStatus = response.getStatusCode();

        logger('DEBUG', `Fetch Response Status: ${httpStatus}`);
        logger('INFO', `Fetch Response Body: ${responseBody}`);
        const responseObj = JSON.parse(responseBody);
        return [responseObj, instance];
    }

    function createAlerts(responseObj, instance) {
        var instance_last_fetch_time = instance.last_fetch_time;
        for (const alert of responseObj.alerts) {
            let cia = new GlideRecord('x_cyit_cyberint_cyberint_alerts');
            cia.addQuery('alert_id', '=', alert.ref_id);
            cia.query();
            exist_alert = cia.next();
            logger('INFO', `Alert ${alert.ref_id} exist in ServiceNow = ${exist_alert}`);
            if (!exist_alert) {
                // Create new alerts in ServiceNow
                cia.initialize();
            }
            cia.alert_id = alert.ref_id;
            cia.status = alert.status;
            cia.description = alert.description;
            cia.recommendation = alert.recommendation;
            cia.source = alert.source;
            cia.type = alert.type;
            cia.category = alert.category;
            cia.created_date = alert.created_date;
            cia.severity = alert.severity;
            cia.environment = alert.environment;
            cia.created_date = alert.created_date;
            cia.updated_date = alert.update_date;
            cia.acknowledged_by = alert.acknowledged_by;
            // if acknowledged_by is not null
            if (!Object.is(alert.acknowledged_by, null)) {
                cia.acknowledged_by = alert.acknowledged_by.email;
            }
            cia.acknowledged_date = alert.acknowledged_date;
            cia.confidence = alert.confidence;
            cia.impacts = alert.impacts.toString();
            cia.iocs = alert.iocs.toString();
            cia.publish_date = alert.publish_date;
            cia.source_category = alert.source_category;
            cia.related_entities = alert.related_entities.toString();
            cia.tags = alert.tags.toString();
            cia.targeted_brands = alert.targeted_brands.toString();
            cia.targeted_vectors = alert.targeted_vectors.toString();
            cia.threat_actor = alert.threat_actor;
            cia.cyberint_alert = `https://${api_environment}.cyberint.io/alerts/alert/${alert.ref_id}`;
            if (!exist_alert) {
                // Create new alerts in ServiceNow
                cia.insert();
                logger('INFO', `Alert ${cia.alert_id} created`);
                // Enrich Alerts
                const alert_id = alert.ref_id;
                const alert_sys_id = cia.getUniqueValue();
                if (instance.enrich_alert) {
                    logger('INFO', `Enrich Alert: TRUE`);
                    if (alert.attachments != null && alert.attachments.length) {
                        for (const attachment of alert.attachments) {
                            const attachment_id = attachment.id;
                            const attachments_file_name = attachment.name;
                            attachments(alert_id, alert_sys_id, attachment_id, attachments_file_name);
                        }
                    }
                    cia.attachments = "True";

                    if (alert.analysis_report) {
                        const analysis_report_file_name = alert.analysis_report.name;
                        analysisReport(alert_id, alert_sys_id, analysis_report_file_name);
                    }
                }
            } else {
                // Update exist alerts in ServiceNow
                cia.update();
                logger('INFO', `Alert ${cia.alert_id} updated`);
            }

            // if alert's update_date is ahead of previously stored instance_last_fetch_time (result == 1)
            if (new GlideDateTime(alert.update_date).compareTo(new GlideDateTime(instance_last_fetch_time)) == 1) {
                instance_last_fetch_time = alert.update_date;
            }
        }
        return instance_last_fetch_time;
    }

    function setRequestCustomHeaders(r) {
        r.setRequestHeader('X-Integration-Type', x_integration_type);
        r.setRequestHeader('X-Integration-Instance-Name', x_integration_instance_name);
        r.setRequestHeader('X-Integration-Instance-Id', x_integration_instance_id);
        r.setRequestHeader('X-Integration-Customer-Name', x_integration_customer_name);
        r.setRequestHeader('X-Integration-Version', x_integration_version);

        r.setRequestHeader('Cookie', 'access_token=' + decrypted_token);

        return r;
    }

    function setRequestStringParameters(r) {
        r.setStringParameter('api_environment', api_environment);

        return r;
    }

    function logger(level, message) {
        const instance = x_integration_instance_name;
        switch (level.toUpperCase()) {
            case 'INFO':
                gs.info(`[${instance}] ${message}`);
                break;
            case 'DEBUG': 
                gs.debug(`[${instance}] ${message}`);
                break;
            case 'ERROR':
                gs.error(`[${instance}] ${message}`);
                break;
            default: 
                // INFO
                gs.info(`[${instance}] ${message}`);
        }
    }

    try {
        let instance = new GlideRecord('x_cyit_cyberint_configuration');
        instance.addQuery('api_token', '!=', 0);
        instance.query();
        instance.next();

        // Check if instance is active 
        if (Object.is(instance.status.toLowerCase(), 'enable')) {

            // make it var for global script context
            var api_environment = instance.api_environment;
            var x_integration_type = 'servicenow';
            var x_integration_instance_name = instance.instance_name;
            var x_integration_instance_id = api_environment;
            var x_integration_customer_name = instance.company_name;
            var decrypted_token = instance.api_token.getDecryptedValue();

			// let's extract version for developed app first
            let grSysApp = new GlideRecord('sys_app');
            grSysApp.addQuery('name', 'STARTSWITH', 'Cyberint');
            grSysApp.query();

            if (grSysApp.next()) {
                logger('INFO', `Application version: ${grSysApp.version}`);
                var x_integration_version = grSysApp.version;
            }

			// let's extract version for store app, if undefined
			if (x_integration_version == "undefined") {
				grSysApp = new GlideRecord('sys_store_app');
				grSysApp.addQuery('name', 'STARTSWITH', 'Cyberint');
				grSysApp.query();

				if (grSysApp.next()) {
					logger('INFO', `Application version: ${grSysApp.version}`);
					x_integration_version = grSysApp.version;
				}
			}

            logger('DEBUG', `Instance Status = "${instance.status}". About to start pulling...`);
            let x = 1;
            let total_alerts_to_fetch = 1;
            var last_fetch_time = instance.last_fetch_time;
            while (total_alerts_to_fetch > 0) {
                const fetchValues = fetchAlerts(x);
                const responseObject = fetchValues[0];
                var sn_instance = fetchValues[1];

                logger('INFO', `Total alerts: ${responseObject.total}`);
                total_alerts_to_fetch = responseObject.total;
                last_fetch_time = createAlerts(responseObject, sn_instance);
                total_alerts_to_fetch -= (100 * x++);

                if (total_alerts_to_fetch > 0) {
                    logger('INFO', `${total_alerts_to_fetch} more to fetch`);
                }
            }
            logger('INFO', 'Finish fetching alerts');

            sn_instance.last_fetch_time = last_fetch_time;
            logger('INFO', `Update last_fetch_time: ${sn_instance.last_fetch_time}`);
            sn_instance.script_last_run_time = new GlideDateTime();
            sn_instance.update();
        } else {
            logger('INFO', `Instance Status is ${instance.status}`);
        }
    } catch (ex) {
        logger('ERROR', ex);
    }
})(current, previous);
]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-18 11:45:31</sys_created_on>
        <sys_id>cef871cf979111108e05fbc71153af8e</sys_id>
        <sys_mod_count>361</sys_mod_count>
        <sys_name>Cyberint_Pulling_Script</sys_name>
        <sys_package display_value="Cyberint App" source="x_cyit_cyberint">9a49147a975111108e05fbc71153af5f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cyberint App">9a49147a975111108e05fbc71153af5f</sys_scope>
        <sys_update_name>sysauto_script_cef871cf979111108e05fbc71153af8e</sys_update_name>
        <sys_updated_by>KirillL</sys_updated_by>
        <sys_updated_on>2024-03-05 09:59:38</sys_updated_on>
        <time_zone/>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
